<?xml version="1.0" encoding="utf-8"?>

<project name="phingdrupaldistributions" phingVersion="2.10.0" default="usage">
  <target name="usage" depends="init">
    <echo msg="Hello! Phing is used to allow developers to easily build, install and test ${phing.project.name}!"/>
    <echo msg="A good way to get started is to create a build.properties file which tells phing about your environment and then run 'phing test' which will run the Behat tests and make sure that ${phing.project.name} is working correctly in your environment."/>
  </target>

  <!-- =====================================================================
       Profile build targets: Building the profile from .make files.
       ===================================================================== -->

  <target name="check-profile"
          depends="init"
          description="Checks if the profile is built or not."
          hidden="true">
    <property name="project.check-profile" value="false"/>
    <available-filelist property="project.check-profile">
      <filelist dir="${phing.dir}/modules" files="${build.artifacts.profile.modules.dirs}"/>
      <filelist dir="${phing.dir}/themes" files="${build.artifacts.profile.themes.dirs}"/>
      <filelist dir="${phing.dir}/libraries" files="${build.artifacts.profile.libraries.dirs}"/>
    </available-filelist>
  </target>

  <target name="make-profile-upstream"
          depends="init, setup-drush, check-profile"
          description="Build the modules, libraries and themes for this profile using the development code from upstream."
          unless="project.make-profile.skip">
    <if>
      <or>
        <isfalse value="${project.check-profile}"/>
        <and>
          <isset property="project.make-profile.rebuild"/>
          <istrue value="${project.make-profile.rebuild}"/>
        </and>
      </or>
      <then>

        <drush command="make" assume="yes">
          <option name="no-core"/>
          <option name="contrib-destination">.</option>
          <param>${drush.make.profile-upstream}</param>
          <option name="concurrency">${drush.make.concurrency}</option>
        </drush>

        <!-- Set property to prevent target from being executed multiple times -->
        <property name="project.make-profile.skip" value="true"/>
      </then>
      <else>
        <echo msg="Profile has already been made. Run 'phing rebuild-profile-upstream' to force it to be made again."/>
      </else>
    </if>
  </target>

  <target name="make-profile-dev"
          depends="init, setup-drush, check-profile"
          description="Build the modules, libraries and themes for this profile using the development you're working on."
          unless="project.make-profile.skip">
    <if>
      <or>
        <isfalse value="${project.check-profile}"/>
        <and>
          <isset property="project.make-profile.rebuild"/>
          <istrue value="${project.make-profile.rebuild}"/>
        </and>
      </or>
      <then>

        <drush command="make" assume="yes">
          <option name="no-core"/>
          <option name="contrib-destination">.</option>
          <param>${drush.make.profile-dev}</param>
          <option name="concurrency">${drush.make.concurrency}</option>
          <option name="no-gitinfofile"/>
          <option name="working-copy"/>
        </drush>

        <!-- Set property to prevent target from being executed multiple times -->
        <property name="project.make-profile.skip" value="true"/>
      </then>
      <else>
        <echo msg="Profile has already been made. Run 'phing rebuild-profile-dev' to force it to be made again."/>
      </else>
    </if>
  </target>

  <target name="make-profile"
          depends="internal:load-properties"
          description="Build the modules, libraries and themes for this profile using the default build mode (${build.mode})."
          unless="project.make-profile.skip">
    <phingcall target="make-profile-${build.mode}"/>
  </target>

  <target name="rebuild-profile-upstream"
          description="Force a rebuild of the modules, libraries and themes for this profile using the development code from upstream.">

    <phingcall target="make-profile-upstream">
      <property name="project.make-profile.rebuild" value="1"/>
    </phingcall>
  </target>

  <target name="rebuild-profile-dev"
          description="Force a rebuild of the modules, libraries and themes for this profile using the development code you're working on.">

    <!-- TODO: this one is a little tricky, because we don't want to wipe out the existing
         Git clones, but instead pull from upstream again. Then we want to run the .make files
         in the modules directly, rather than running the main .make file again. -->
    <echo msg="Unimplemented, sorry! For the time-being you can go to the Git clones and pull from dev yourself."/>
  </target>

  <target name="rebuild-profile"
          depends="internal:load-properties"
          description="Force a rebuild of the modules, libraries and themes for this profile using the default build mode (${build.mode})."
          unless="project.make-profile.skip">
    <phingcall target="rebuild-profile-${build.mode}"/>
  </target>

  <!-- =====================================================================
       Clean-up targets: Deleting build artifacts.
       ===================================================================== -->

  <target name="clean"
          depends="init, clean-temp, clean-profile"
          description="Clean up all the files created by the build process.">
  </target>

  <target name="clean-temp"
          depends="init"
          description="Clean up temporary files.">
    <delete dir="${build.artifacts.temp.dir}" quiet="true"/>
  </target>

  <target name="clean-profile"
          depends="init"
          description="Clean files created when making the profile.">
    <delete quiet="true">
      <filelist dir="${phing.dir}/modules" files="${build.artifacts.profile.modules.dirs}"/>
      <filelist dir="${phing.dir}/themes" files="${build.artifacts.profile.themes.dirs}"/>
      <filelist dir="${phing.dir}/libraries" files="${build.artifacts.profile.libraries.dirs}"/>
    </delete>
  </target>

  <!-- =====================================================================
       Setup targets: Used to setup dependencies for use in normal targets.
       ===================================================================== -->

  <target name="setup-drush"
          depends="init, internal:setup-dirs"
          description="Setup drush in order to execute drush tasks."
          hidden="true">
    <!-- TODO: If the user doesn't have drush, or the wrong version of drush
         we could actually use composer to install it. -->

    <!-- Setup the Drush task to make using from Phing easier. -->
    <property name="build.tools.phing.drush.dir" value="${build.tools.dir}/phing-drush" />
    <if>
      <not><available type="dir" file="${build.tools.phing.drush.dir}"/></not>
      <then>
        <gitclone
          repository="${build.tools.phing.drush.repository.url}"
          targetPath="${build.tools.phing.drush.dir}" />
        <gitcheckout
          repository="${build.tools.phing.drush.dir}"
          branchname="${build.tools.phing.drush.repository.revision}" />
      </then>
    </if>

    <!-- Register as custom Phing task -->
    <taskdef name="drush" classname="DrushTask"
             classpath="${build.tools.phing.drush.dir}" />

    <!-- Run drush from the project Drupal directory -->
    <!--
    <property name="drush.root" value="${project.drupal.dir}"/>
    -->
  </target>

  <!-- TODO: We should have a "setup-git" task that errors if it can't find the
       'git' program on the current path and automatically installs
       VersionControl_Git if found (putting it on the PHP class path). -->

  <target name="setup-composer"
          depends="init, internal:setup-dirs"
          description="Setup composer so that we can use it to install stuff."
          hidden="true">
     <property name="build.tools.composer" value="${build.tools.dir}/composer.phar" />

     <if>
       <not>
         <available file="${build.tools.composer}"/>
       </not>
       <then>
         <php expression="$argv = array('--install-dir', '${build.tools.dir}'); eval('?>'.file_get_contents('https://getcomposer.org/installer'))" />
       </then>
     </if>
  </target>

  <!-- =====================================================================
       Internal targets: Used for really low-level setup.
       ===================================================================== -->

  <target name="init"
          depends="internal:load-properties"
          description="Performs the internal setup necessary to run ALL normal tasks."
          unless="internal.done.init"
          hidden="true">
    <!-- We use this pattern for a lot of the "fundamental" targets. Normally, this
         isn't necessary because phing keeps track of the dependencies that have
         already run. But if we use 'phingcall' it resets the list of run dependencies
         (but not the properties) so it'll run re-run targets it's already run.

         By putting unless="internal.done.XXX" in the target and setting a property
         we can prevent the target from being re-run!

         We shouldn't do this for every target, because it's an ugly pattern. Instead
         we should do it sparingly, in the cases where we see targets that are
         frequently being re-run needlessly. -->
    <property name="internal.done.init" value="true"/>

    <!-- Load custom Tasks. -->
    <taskdef name="available-filelist" classname="AvailableFileListTask"
             classpath="${internal.build.dir}/lib" />
  </target>

  <target name="internal:load-properties"
          description="Loads the build.properties with the correct defaults set."
          unless="internal.done.load-properties"
          hidden="true">
    <property name="internal.done.load-properties" value="true"/>

    <!-- Make an alias to our internal build dir that's easier to type. -->
    <property name="internal.build.dir" value="${phing.dir.phingdrupaldistributions}" />

    <!-- First load the internal defaults from phing-drupal-distributions. -->
    <property file="${internal.build.dir}/build.default.properties" override="true"/>

    <!-- Next, load the distribution's defaults. -->
    <property file="${phing.dir}/build.default.properties" override="true"/>

    <!-- Finally, load the user's local defaults. -->
    <property file="${phing.dir}/build.properties" override="true"/>
  </target>

  <target name="internal:setup-dirs"
          depends="internal:load-properties"
          description="Sets up the build directories for build artifacts."
          unless="internal.done.setup-dirs"
          hidden="true">
    <property name="internal.done.setup-dirs" value="true"/>

    <!-- Create temp directory and it's children. -->
    <property name="build.tools.dir" value="${build.artifacts.temp.dir}/tools"/>
    <mkdir dir="${build.artifacts.temp.dir}"/>
    <mkdir dir="${build.tools.dir}"/>
  </target>
</project>
